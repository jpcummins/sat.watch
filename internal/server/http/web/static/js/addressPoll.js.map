{
  "version": 3,
  "sources": ["../../../../../../ts/src/addressPoll.ts"],
  "sourcesContent": ["// Create a polling component to hydrate address balances via AlpineJS\n\ndeclare const Alpine: any;\n\ninterface AddressStatus {\n  id: string;\n  utxoCount: number;\n  balance: number;\n}\n\n// Register Alpine component on alpine:init for CSP compliance\ndocument.addEventListener('alpine:init', () => {\n\tAlpine.data('addressPoll', () => ({\n\t\tpending: [] as string[],\n\n\t\tinit(): void {\n\t\t\t// Use setTimeout to ensure DOM is fully rendered, especially table rows\n\t\t\tsetTimeout(() => {\n\t\t\t\t// Refine selector: target pending cells first\n\t\t\t\tconst pendingCells = document.querySelectorAll<HTMLElement>('td[data-pending=\"true\"]');\n\t\t\t\tthis.pending = Array.from(pendingCells)\n\t\t\t\t\t.map(td => td.closest('tr')?.dataset.addressId!) // Get ID from parent row\n\t\t\t\t\t.filter(Boolean) // Remove any undefined/null IDs if closest('tr') failed\n\t\t\t\t\t.filter((v, i, a) => a.indexOf(v) === i); // Unique IDs\n\n\t\t\t\tthis.poll();\n\t\t\t\tsetInterval(() => this.poll(), 5000);\n\t\t\t}, 0); // Defer execution slightly\n\t\t},\n\n\t\tasync poll(): Promise<void> {\n\t\t\tif (!this.pending.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst ids = encodeURIComponent(this.pending.join(','));\n\t\t\tconst res = await fetch(`/app/addresses/status?ids=${ids}`, {\n\t\t\t\theaders: { 'Accept': 'application/json' }\n\t\t\t});\n\t\t\tif (!res.ok) return;\n\n\t\t\tconst updates = (await res.json()) as AddressStatus[];\n\t\t\t// Add check to ensure updates is an array before calling forEach\n\t\t\tif (!Array.isArray(updates)) {\n\t\t\t\treturn; // Stop processing this poll cycle\n\t\t\t}\n\n\t\t\tupdates.forEach(u => {\n\t\t\t\tconst row = document.querySelector<HTMLElement>(`[data-address-id=\"${u.id}\"]`);\n\t\t\t\tif (!row) return;\n\t\t\t\tconst utxoTd = row.querySelector<HTMLElement>('.utxo-count-cell')!;\n\t\t\t\tconst balTd  = row.querySelector<HTMLElement>('.balance-cell')!;\n\n\t\t\t\tutxoTd.textContent = u.utxoCount.toString();\n\t\t\t\tbalTd.textContent  = u.balance.toString();\n\n\t\t\t\tutxoTd.dataset.pending = 'false';\n\t\t\t\tbalTd.dataset.pending  = 'false';\n\t\t\t});\n\n\t\t\t// remove finished IDs\n\t\t\tthis.pending = this.pending.filter(id => !updates.some(u => u.id === id));\n\t\t}\n\t}));\n}); "],
  "mappings": "MAWA,SAAS,iBAAiB,cAAe,IAAM,CAC9C,OAAO,KAAK,cAAe,KAAO,CACjC,QAAS,CAAC,EAEV,MAAa,CAEZ,WAAW,IAAM,CAEhB,IAAMA,EAAe,SAAS,iBAA8B,yBAAyB,EACrF,KAAK,QAAU,MAAM,KAAKA,CAAY,EACpC,IAAIC,GAAMA,EAAG,QAAQ,IAAI,GAAG,QAAQ,SAAU,EAC9C,OAAO,OAAO,EACd,OAAO,CAACC,EAAGC,EAAGC,IAAMA,EAAE,QAAQF,CAAC,IAAMC,CAAC,EAExC,KAAK,KAAK,EACV,YAAY,IAAM,KAAK,KAAK,EAAG,GAAI,CACpC,EAAG,CAAC,CACL,EAEA,MAAM,MAAsB,CAC3B,GAAI,CAAC,KAAK,QAAQ,OACjB,OAGD,IAAME,EAAM,mBAAmB,KAAK,QAAQ,KAAK,GAAG,CAAC,EAC/CC,EAAM,MAAM,MAAM,6BAA6BD,CAAG,GAAI,CAC3D,QAAS,CAAE,OAAU,kBAAmB,CACzC,CAAC,EACD,GAAI,CAACC,EAAI,GAAI,OAEb,IAAMC,EAAW,MAAMD,EAAI,KAAK,EAE3B,MAAM,QAAQC,CAAO,IAI1BA,EAAQ,QAAQC,GAAK,CACpB,IAAMC,EAAM,SAAS,cAA2B,qBAAqBD,EAAE,EAAE,IAAI,EAC7E,GAAI,CAACC,EAAK,OACV,IAAMC,EAASD,EAAI,cAA2B,kBAAkB,EAC1DE,EAASF,EAAI,cAA2B,eAAe,EAE7DC,EAAO,YAAcF,EAAE,UAAU,SAAS,EAC1CG,EAAM,YAAeH,EAAE,QAAQ,SAAS,EAExCE,EAAO,QAAQ,QAAU,QACzBC,EAAM,QAAQ,QAAW,OAC1B,CAAC,EAGD,KAAK,QAAU,KAAK,QAAQ,OAAOC,GAAM,CAACL,EAAQ,KAAKC,GAAKA,EAAE,KAAOI,CAAE,CAAC,EACzE,CACD,EAAE,CACH,CAAC",
  "names": ["pendingCells", "td", "v", "i", "a", "ids", "res", "updates", "u", "row", "utxoTd", "balTd", "id"]
}
